Traceback (most recent call last):
  File "/usr/local/lib/python3.12/dist-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.12/dist-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.12/dist-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/dist-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/dist-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.12/dist-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.12/dist-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Misalkan cleaned_rows sudah berisi data yang sudah dibersihkan
val_X = cleaned_rows[1:]  # Hapus header jika ada, dan gunakan data

# KMeans untuk 2 klaster
kmeans = KMeans(n_clusters=2, random_state=42, n_init=5, max_iter=400, tol=0.0001, algorithm='lloyd')
kmeans.fit(val_X)

# Reduksi dimensi dengan PCA ke 2D untuk visualisasi
pca = PCA(n_components=2)
X_pca = pca.fit_transform(val_X)

# Visualisasi hasil clustering
plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=kmeans.labels_, cmap='viridis', label='Data Points')

# Menambahkan centroid ke visualisasi
centroids = pca.transform(kmeans.cluster_centers_)  # Transform centroid ke dalam dimensi 2D
plt.scatter(centroids[:, 0], centroids[:, 1], s=200, c='red', marker='X', label='Centroids')

# Menambahkan label dan judul
plt.title('Visualisasi K-Means dengan 2 Klaster dan Centroid')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')
plt.legend()
plt.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m/tmp/ipython-input-2313803382.py[0m in [0;36m<cell line: 0>[0;34m()[0m
[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0;31m# Misalkan cleaned_rows sudah berisi data yang sudah dibersihkan[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0mval_X[0m [0;34m=[0m [0mcleaned_rows[0m[0;34m[[0m[0;36m1[0m[0;34m:[0m[0;34m][0m  [0;31m# Hapus header jika ada, dan gunakan data[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0;34m[0m[0m
[1;32m      8[0m [0;31m# KMeans untuk 2 klaster[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'cleaned_rows' is not defined

